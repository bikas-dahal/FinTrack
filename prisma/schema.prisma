datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?          @unique
  username      String?          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  portfolios    Portfolio[]
  categories    Cateregory[]
  transactions  Transaction[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Portfolio {
  id            String          @id @default(cuid())
  name          String?
  description   String?
  userId        String          
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Cateregory {
  id            String          @id @default(cuid())
  name          String?
  description   String?
  userId        String          
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}


model Transaction {
  id            String          @id @default(cuid())
  amount        Int
  payee         String
  notes         String?
  date          DateTime
  userId        String          
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId    String?         
  category      Cateregory?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  portfolioId   String          
  portfolio     Portfolio       @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 